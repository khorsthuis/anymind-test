/*
 * This file is generated by jOOQ.
 */
package com.AnyMind.api.tables;


import com.AnyMind.api.Keys;
import com.AnyMind.api.Public;
import com.AnyMind.api.enums.PaymentMethod;
import com.AnyMind.api.tables.records.PaymentMethodsRecord;

import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.17.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PaymentMethods extends TableImpl<PaymentMethodsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.payment_methods</code>
     */
    public static final PaymentMethods PAYMENT_METHODS = new PaymentMethods();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PaymentMethodsRecord> getRecordType() {
        return PaymentMethodsRecord.class;
    }

    /**
     * The column <code>public.payment_methods.id</code>.
     */
    public final TableField<PaymentMethodsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.payment_methods.payment_method</code>.
     */
    public final TableField<PaymentMethodsRecord, PaymentMethod> PAYMENT_METHOD = createField(DSL.name("payment_method"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(com.AnyMind.api.enums.PaymentMethod.class), this, "");

    /**
     * The column <code>public.payment_methods.price_modifier_lower</code>.
     */
    public final TableField<PaymentMethodsRecord, Double> PRICE_MODIFIER_LOWER = createField(DSL.name("price_modifier_lower"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.payment_methods.price_modifier_upper</code>.
     */
    public final TableField<PaymentMethodsRecord, Double> PRICE_MODIFIER_UPPER = createField(DSL.name("price_modifier_upper"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.payment_methods.points_applicable</code>.
     */
    public final TableField<PaymentMethodsRecord, Double> POINTS_APPLICABLE = createField(DSL.name("points_applicable"), SQLDataType.DOUBLE.nullable(false), this, "");

    private PaymentMethods(Name alias, Table<PaymentMethodsRecord> aliased) {
        this(alias, aliased, null);
    }

    private PaymentMethods(Name alias, Table<PaymentMethodsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.payment_methods</code> table reference
     */
    public PaymentMethods(String alias) {
        this(DSL.name(alias), PAYMENT_METHODS);
    }

    /**
     * Create an aliased <code>public.payment_methods</code> table reference
     */
    public PaymentMethods(Name alias) {
        this(alias, PAYMENT_METHODS);
    }

    /**
     * Create a <code>public.payment_methods</code> table reference
     */
    public PaymentMethods() {
        this(DSL.name("payment_methods"), null);
    }

    public <O extends Record> PaymentMethods(Table<O> child, ForeignKey<O, PaymentMethodsRecord> key) {
        super(child, key, PAYMENT_METHODS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<PaymentMethodsRecord, Integer> getIdentity() {
        return (Identity<PaymentMethodsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PaymentMethodsRecord> getPrimaryKey() {
        return Keys.PAYMENT_METHODS_PK;
    }

    @Override
    public PaymentMethods as(String alias) {
        return new PaymentMethods(DSL.name(alias), this);
    }

    @Override
    public PaymentMethods as(Name alias) {
        return new PaymentMethods(alias, this);
    }

    @Override
    public PaymentMethods as(Table<?> alias) {
        return new PaymentMethods(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PaymentMethods rename(String name) {
        return new PaymentMethods(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PaymentMethods rename(Name name) {
        return new PaymentMethods(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PaymentMethods rename(Table<?> name) {
        return new PaymentMethods(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, PaymentMethod, Double, Double, Double> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super PaymentMethod, ? super Double, ? super Double, ? super Double, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super PaymentMethod, ? super Double, ? super Double, ? super Double, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
