/*
 * This file is generated by jOOQ.
 */
package com.AnyMind.api.tables.records;


import com.AnyMind.api.tables.Sales;

import java.time.OffsetDateTime;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.17.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SalesRecord extends UpdatableRecordImpl<SalesRecord> implements Record4<Integer, Double, OffsetDateTime, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.sales.id</code>.
     */
    public SalesRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.sales.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.sales.amount</code>.
     */
    public SalesRecord setAmount(Double value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.sales.amount</code>.
     */
    public Double getAmount() {
        return (Double) get(1);
    }

    /**
     * Setter for <code>public.sales.sale_datetime</code>.
     */
    public SalesRecord setSaleDatetime(OffsetDateTime value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.sales.sale_datetime</code>.
     */
    public OffsetDateTime getSaleDatetime() {
        return (OffsetDateTime) get(2);
    }

    /**
     * Setter for <code>public.sales.points_provided</code>.
     */
    public SalesRecord setPointsProvided(Integer value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.sales.points_provided</code>.
     */
    public Integer getPointsProvided() {
        return (Integer) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Double, OffsetDateTime, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, Double, OffsetDateTime, Integer> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Sales.SALES.ID;
    }

    @Override
    public Field<Double> field2() {
        return Sales.SALES.AMOUNT;
    }

    @Override
    public Field<OffsetDateTime> field3() {
        return Sales.SALES.SALE_DATETIME;
    }

    @Override
    public Field<Integer> field4() {
        return Sales.SALES.POINTS_PROVIDED;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public Double component2() {
        return getAmount();
    }

    @Override
    public OffsetDateTime component3() {
        return getSaleDatetime();
    }

    @Override
    public Integer component4() {
        return getPointsProvided();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public Double value2() {
        return getAmount();
    }

    @Override
    public OffsetDateTime value3() {
        return getSaleDatetime();
    }

    @Override
    public Integer value4() {
        return getPointsProvided();
    }

    @Override
    public SalesRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public SalesRecord value2(Double value) {
        setAmount(value);
        return this;
    }

    @Override
    public SalesRecord value3(OffsetDateTime value) {
        setSaleDatetime(value);
        return this;
    }

    @Override
    public SalesRecord value4(Integer value) {
        setPointsProvided(value);
        return this;
    }

    @Override
    public SalesRecord values(Integer value1, Double value2, OffsetDateTime value3, Integer value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SalesRecord
     */
    public SalesRecord() {
        super(Sales.SALES);
    }

    /**
     * Create a detached, initialised SalesRecord
     */
    public SalesRecord(Integer id, Double amount, OffsetDateTime saleDatetime, Integer pointsProvided) {
        super(Sales.SALES);

        setId(id);
        setAmount(amount);
        setSaleDatetime(saleDatetime);
        setPointsProvided(pointsProvided);
    }

    /**
     * Create a detached, initialised SalesRecord
     */
    public SalesRecord(com.AnyMind.api.tables.pojos.Sales value) {
        super(Sales.SALES);

        if (value != null) {
            setId(value.getId());
            setAmount(value.getAmount());
            setSaleDatetime(value.getSaleDatetime());
            setPointsProvided(value.getPointsProvided());
        }
    }
}
