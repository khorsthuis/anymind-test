/*
 * This file is generated by jOOQ.
 */
package com.AnyMind.api.tables;


import com.AnyMind.api.Keys;
import com.AnyMind.api.Public;
import com.AnyMind.api.tables.records.SalesRecord;

import java.time.OffsetDateTime;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.17.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Sales extends TableImpl<SalesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.sales</code>
     */
    public static final Sales SALES = new Sales();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SalesRecord> getRecordType() {
        return SalesRecord.class;
    }

    /**
     * The column <code>public.sales.id</code>.
     */
    public final TableField<SalesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.sales.amount</code>.
     */
    public final TableField<SalesRecord, Double> AMOUNT = createField(DSL.name("amount"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.sales.sale_datetime</code>.
     */
    public final TableField<SalesRecord, OffsetDateTime> SALE_DATETIME = createField(DSL.name("sale_datetime"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.sales.points_provided</code>.
     */
    public final TableField<SalesRecord, Integer> POINTS_PROVIDED = createField(DSL.name("points_provided"), SQLDataType.INTEGER.nullable(false), this, "");

    private Sales(Name alias, Table<SalesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Sales(Name alias, Table<SalesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.sales</code> table reference
     */
    public Sales(String alias) {
        this(DSL.name(alias), SALES);
    }

    /**
     * Create an aliased <code>public.sales</code> table reference
     */
    public Sales(Name alias) {
        this(alias, SALES);
    }

    /**
     * Create a <code>public.sales</code> table reference
     */
    public Sales() {
        this(DSL.name("sales"), null);
    }

    public <O extends Record> Sales(Table<O> child, ForeignKey<O, SalesRecord> key) {
        super(child, key, SALES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<SalesRecord, Integer> getIdentity() {
        return (Identity<SalesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<SalesRecord> getPrimaryKey() {
        return Keys.SALES_PK;
    }

    @Override
    public Sales as(String alias) {
        return new Sales(DSL.name(alias), this);
    }

    @Override
    public Sales as(Name alias) {
        return new Sales(alias, this);
    }

    @Override
    public Sales as(Table<?> alias) {
        return new Sales(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Sales rename(String name) {
        return new Sales(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sales rename(Name name) {
        return new Sales(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sales rename(Table<?> name) {
        return new Sales(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Double, OffsetDateTime, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super Double, ? super OffsetDateTime, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super Double, ? super OffsetDateTime, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
